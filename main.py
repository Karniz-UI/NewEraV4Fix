import asyncio
import os
import sys
import time
import psutil
import importlib
import importlib.util
import shutil
from datetime import datetime
from telethon import TelegramClient, events

class NewEraV4Fix:
    def __init__(self):
        self.start_time = time.time()
        self.modules_dir = "modules"
        self.loaded_modules = {}
        self.module_commands = {}
        self.config = {}
        self.client = None
        
        self.styled_chars = {
            'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á',
            'f': '“ì', 'g': '…¢', 'h': ' ú', 'i': '…™', 'j': '·¥ä',
            'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è',
            'p': '·¥ò', 'q': '«´', 'r': ' Ä', 's': 'Íú±', 't': '·¥õ',
            'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x', 'y': ' è',
            'z': '·¥¢', '0': 'ùü¢', '1': 'ùü£', '2': 'ùü§', '3': 'ùü•',
            '4': 'ùü¶', '5': 'ùüß', '6': 'ùü®', '7': 'ùü©', '8': 'ùü™',
            '9': 'ùü´'
        }
        
        self.languages = {
            "ru": {
                "uptime": "–ê–ø—Ç–∞–π–º",
                "user": "–Æ–∑–µ—Ä", 
                "cpu": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä",
                "ram": "–û–ø–µ—Ä–∞—Ç–∏–≤–∫–∞",
                "host": "–•–æ—Å—Ç",
                "commands": "–ö–æ–º–∞–Ω–¥—ã",
                "help_text": """**NewEraV4Fix - –∫–æ–º–∞–Ω–¥—ã:**

`.help` - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
`.info` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
`.lm` - –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å (—Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–∞–π–ª)
`.ulm <–∏–º—è>` - –í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å
`.modules` - –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
`.setlang <ru/en>` - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
`.restart` - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
`.stop` - –û—Å—Ç–∞–Ω–æ–≤–∫–∞
`.backup` - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
`.clean` - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã""",
                "module_loaded": "–ú–æ–¥—É–ª—å {} –∑–∞–≥—Ä—É–∂–µ–Ω",
                "module_unloaded": "–ú–æ–¥—É–ª—å {} –≤—ã–≥—Ä—É–∂–µ–Ω",
                "module_not_found": "–ú–æ–¥—É–ª—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "lang_changed": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {}",
                "restarting": "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...",
                "stopping": "–û—Å—Ç–∞–Ω–æ–≤–∫–∞...",
                "no_modules": "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π",
                "modules_list": "**–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:**",
                "backup_created": "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {}",
                "temp_cleaned": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã: {} —Ñ–∞–π–ª–æ–≤"
            },
            "en": {
                "uptime": "Uptime",
                "user": "User",
                "cpu": "CPU", 
                "ram": "RAM",
                "host": "Host",
                "commands": "Commands",
                "help_text": """**NewEraV4Fix - Main commands:**

`.help` - Show commands
`.info` - System information  
`.lm` - Load module (reply to file)
`.ulm <name>` - Unload module
`.modules` - Modules list
`.setlang <ru/en>` - Change language
`.restart` - Restart
`.stop` - Stop
`.backup` - Create backup
`.clean` - Clean temp files""",
                "module_loaded": "Module {} loaded",
                "module_unloaded": "Module {} unloaded", 
                "module_not_found": "Module {} not found",
                "lang_changed": "Language changed to {}",
                "restarting": "Restarting...",
                "stopping": "Stopping...",
                "no_modules": "No modules loaded",
                "modules_list": "**Loaded modules:**",
                "backup_created": "Backup created: {}",
                "temp_cleaned": "Temp files cleaned: {} files"
            }
        }

    def print_banner(self):
        """ASCII-–∞—Ä—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        banner = r"""
  _   _               _____           
 | \ | | _____      _| ____|_ __ __ _ 
 |  \| |/ _ \ \ /\ / /  _| | '__/ _` |
 | |\  |  __/\ V  V /| |___| | | (_| |
 |_| \_|\___| \_/\_/ |_____|_|  \__,_|

Build: #Fix7HxBy9w
Update: No
GoodLuck ‚ô°
"""
        print(banner)

    def load_config(self):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑ config.json"""
        if not hasattr(self, 'config'):
            self.config = {}
        
        defaults = {
            "prefix": ".",
            "language": "ru",
            "owner_id": None
        }
        
        if not all(k in self.config for k in ['api_id', 'api_hash']):
            self.print_banner()
            print(" –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ".center(40, '='))
            
            try:
                self.config['api_id'] = int(input("API ID: ").strip())
                self.config['api_hash'] = input("API Hash: ").strip()
                
                for key, value in defaults.items():
                    user_input = input(f"{key} ({value}): ").strip()
                    self.config[key] = user_input if user_input else value
                
                print("=" * 40)
                return True
                
            except ValueError:
                print("[–û–®–ò–ë–ö–ê] API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return False
        return True

    def get_text(self, key):
        """–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
        return self.languages[self.config["language"]].get(key, key)
        
    def get_uptime(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
        uptime = int(time.time() - self.start_time)
        return f"{uptime // 3600:02d}:{(uptime % 3600) // 60:02d}:{uptime % 60:02d}"
        
    def get_system_info(self):
        """–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        try:
            memory = psutil.virtual_memory()
            return {
                "uptime": self.get_uptime(),
                "ram": f"{memory.percent:.1f}%"
            }
        except:
            return {
                "uptime": self.get_uptime(),
                "ram": "N/A"
            }

    def style_text(self, text):
        """–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è .info"""
        return ''.join([self.styled_chars.get(c.lower(), c) for c in text])
        
    async def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        backup_dir = "newera_backup"
        os.makedirs(backup_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"backup_{timestamp}.zip"
        
        try:
            shutil.make_archive(
                os.path.join(backup_dir, f"backup_{timestamp}"), 
                'zip', 
                '.', 
                [self.modules_dir, "main.py"]
            )
            return backup_name
        except Exception as e:
            print(f"Backup error: {e}")
            return None
            
    async def clean_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        temp_dir = "/tmp"
        if not os.path.exists(temp_dir):
            return 0
            
        count = 0
        for filename in os.listdir(temp_dir):
            file_path = os.path.join(temp_dir, filename)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
                    count += 1
            except Exception:
                continue
        return count
        
    async def load_module(self, file_path, module_name):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        try:
            os.makedirs(self.modules_dir, exist_ok=True)
            module_path = os.path.join(self.modules_dir, f"{module_name}.py")
            
            with open(file_path, "rb") as src, open(module_path, "wb") as dst:
                dst.write(src.read())
                
            spec = importlib.util.spec_from_file_location(module_name, module_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            if hasattr(module, "register"):
                handlers = await module.register(self.client)
                if hasattr(module, "commands"):
                    self.module_commands[module_name] = module.commands
                self.loaded_modules[module_name] = module
                return True
            return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: {str(e)}")
            return False
            
    async def unload_module(self, module_name):
        """–í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è"""
        if module_name in self.loaded_modules:
            module = self.loaded_modules[module_name]
            if hasattr(module, "unregister"):
                await module.unregister(self.client)
                
            if module_name in self.module_commands:
                del self.module_commands[module_name]
                
            del self.loaded_modules[module_name]
            
            module_path = os.path.join(self.modules_dir, f"{module_name}.py")
            if os.path.exists(module_path):
                os.remove(module_path)
                
            return True
        return False
        
    async def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        prefix = self.config["prefix"]
        
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}help$"))
        async def help_handler(event):
            await event.edit(self.get_text("help_text"))
            
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}info$"))
        async def info_handler(event):
            info = self.get_system_info()
            me = await self.client.get_me()
            username = me.username or me.first_name
            
            text = f"""`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ     NewEraV4Fix     
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ {self.style_text('uptime')}: {info["uptime"]}      
‚îÇ {self.style_text('user')}: {username}       
‚îÇ {self.style_text('ram')}: {info["ram"]}           
‚îÇ {self.style_text('host')}: Termux         
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
`"""
            await event.edit(text)
            
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}backup$"))
        async def backup_handler(event):
            backup_name = await self.create_backup()
            text = self.get_text("backup_created").format(backup_name) if backup_name else "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"
            await event.edit(text)
            
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}clean$"))
        async def clean_handler(event):
            count = await self.clean_temp_files()
            await event.edit(self.get_text("temp_cleaned").format(count))
            
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}lm$"))
        async def load_module_handler(event):
            if not event.is_reply:
                return await event.edit("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ñ–∞–π–ª –º–æ–¥—É–ª—è")
                
            reply = await event.get_reply_message()
            if not reply.document:
                return await event.edit("–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª")
                
            file_name = reply.document.attributes[0].file_name
            if not file_name.endswith('.py'):
                return await event.edit("–ù—É–∂–µ–Ω .py —Ñ–∞–π–ª")
                
            module_name = file_name[:-3]
            await event.edit("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è...")
            
            file_path = await reply.download_media()
            success = await self.load_module(file_path, module_name)
            
            text = self.get_text("module_loaded").format(module_name) if success else f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {module_name}"
            await event.edit(text)
            
            if os.path.exists(file_path):
                os.remove(file_path)
                
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}ulm (.+)$"))
        async def unload_module_handler(event):
            module_name = event.pattern_match.group(1)
            success = await self.unload_module(module_name)
            
            text = self.get_text("module_unloaded").format(module_name) if success \
                else self.get_text("module_not_found").format(module_name)
            await event.edit(text)
            
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}modules$"))
        async def modules_handler(event):
            if not self.loaded_modules:
                return await event.edit(self.get_text("no_modules"))
                
            text = self.get_text("modules_list") + "\n"
            for name, module in self.loaded_modules.items():
                text += f"‚Ä¢ `{name}`\n"
                if name in self.module_commands:
                    text += "  ‚îî " + ", ".join(f"`{prefix}{cmd}`" for cmd in self.module_commands[name]) + "\n"
            await event.edit(text)
            
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}setlang (ru|en)$"))
        async def setlang_handler(event):
            lang = event.pattern_match.group(1)
            self.config["language"] = lang
            await event.edit(self.get_text("lang_changed").format(lang.upper()))
            
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}restart$"))
        async def restart_handler(event):
            await event.edit(self.get_text("restarting"))
            await self.client.disconnect()
            os.execl(sys.executable, sys.executable, *sys.argv)
            
        @self.client.on(events.NewMessage(outgoing=True, pattern=f"^\\{prefix}stop$"))
        async def stop_handler(event):
            await event.edit(self.get_text("stopping"))
            await self.client.disconnect()
            sys.exit(0)
            
    async def start(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        if not self.load_config():
            print("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            return
            
        self.client = TelegramClient(
            "newerav4fix_session",
            self.config["api_id"],
            self.config["api_hash"]
        )
        
        await self.client.start()
        await self.setup_handlers()
        
        me = await self.client.get_me()
        print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{me.username}")
        print(f"–ü—Ä–µ—Ñ–∏–∫—Å: {self.config['prefix']}")
        print("–î–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .help")
        
        await self.client.run_until_disconnected()

if __name__ == "__main__":
    bot = NewEraV4Fix()
    asyncio.run(bot.start())
